package transportc

import (
	"io"
)

type SignalMethod interface {
	// MakeOffer sends the SDP offer generated by offerer to the answerer.
	//
	// Called by OFFERER (1)
	MakeOffer(offer []byte) error

	// GetOffer blocks until the next SDP offer is received.
	//
	// Called by ANSWERER (2)
	GetOffer() ([]byte, error)

	// Answer sends the SDP answer generated by answerer to the offerer.
	//
	// Called by ANSWERER (3)
	Answer(answer []byte) error

	// GetAnswer fetches the SDP answer from the answerer.
	//
	// Called by OFFERER (4)
	GetAnswer() ([]byte, error)
}

var (
	// ManualSignal won't automatically establish a connection.
	// The connection will be established once both party have called SetRemoteDescription.
	ManualSignal SignalMethod = nil
)

// IOSignal implements a minimalistic signaling method.
// Offerer's writer should write to the answerer's reader and vice versa.
type IOSignal struct {
	writer io.Writer
	reader io.Reader
}

func NewIOSignal(w io.Writer, r io.Reader) *IOSignal {
	return &IOSignal{writer: w, reader: r}
}

// MakeOffer implements SignalMethod.MakeOffer
// It writes the SDP offer to the writer.
func (ms *IOSignal) MakeOffer(offer []byte) error {
	n, err := ms.writer.Write(offer)
	if err != nil {
		return err
	} else if n != len(offer) {
		return io.ErrShortWrite
	}
	return nil
}

// Answer implements SignalMethod.Answer
// It prints the SDP answer to the writer.
func (ms *IOSignal) Answer(answer []byte) error {
	n, err := ms.writer.Write(answer)
	if err != nil {
		return err
	} else if n != len(answer) {
		return io.ErrShortWrite
	}
	return nil
}

// GetAnswer implements SignalMethod.GetAnswer
// It reads the SDP answer from the reader.
func (ms *IOSignal) GetAnswer() ([]byte, error) {
	answer := make([]byte, 2048) // assuming the answer is less than 2048 bytes
	n, err := ms.reader.Read(answer)
	if err != nil {
		return nil, err
	}
	return answer[:n], nil
}

// GetOffer implements SignalMethod.GetOffer
// It reads the SDP offer from the reader.
func (ms *IOSignal) GetOffer() ([]byte, error) {
	offer := make([]byte, 2048) // assuming the offer is less than 2048 bytes
	n, err := ms.reader.Read(offer)
	if err != nil {
		return nil, err
	}
	return offer[:n], nil
}
